package tw.com.wd.example.rocksdb;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.rocksdb.Options;
import org.rocksdb.RocksDB;
import org.rocksdb.RocksDBException;

import java.io.File;
import java.util.UUID;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;


public class DBOpenTest {
    private String putPrefix;
    private String dbPath;
    private int testCount;
    private Options options;

    @Before
    public void beforeTest() {
        // Setup the key and value
        String uuid = UUID
            .randomUUID().toString();
        this.putPrefix = "Data-" + uuid + "-";

        // Setup path of RocksDB
        this.dbPath = DBConfig.getDBRootPath() + File.separator + DBOpenTest.class.getSimpleName();

        // Setup option of RocksDB
        this.options = new Options();
        this.options.setCreateIfMissing(true);

        // Set round for test
        this.testCount = 100;
    }

    @After
    public void afterTest() {
        try {
            RocksDB.destroyDB(this.dbPath, new Options());
        } catch (RocksDBException e) {
            e.printStackTrace();
        }

        this.options.close();
    }

    @Test
    public void testOpenOneTime() {
        Exception exception = null;
        long cost = 0L;

        long startTime = System.currentTimeMillis();
        try (RocksDB rocksDB = RocksDB.open(options, dbPath)) {
            for (int count = 0; count < this.testCount; count++) {
                String putData = putPrefix + count;
                rocksDB.put(putData.getBytes(), putData.getBytes());
            }
        } catch (RocksDBException e) {
            e.printStackTrace();
            exception = e;
        }
        cost = System.currentTimeMillis() - startTime;
        System.out.printf("Cost: %d ms\n", cost);

        assertThat(exception, is(nullValue()));
        assertNotEquals(cost, 0L);
        assertTrue(cost > 1);
    }

    @Test
    public void testOpenEveryTime() {
        Exception exception = null;
        long cost = 0L;

        long startTime = System.currentTimeMillis();
        for (int count = 0; count < testCount; count++) {
            String putData = putPrefix + count;

            try (RocksDB rocksDB = RocksDB.open(options, dbPath)) {
                rocksDB.put(putData.getBytes(), putData.getBytes());
            } catch (RocksDBException e) {
                e.printStackTrace();
            }
        }
        cost = System.currentTimeMillis() - startTime;
        System.out.printf("Cost: %d ms\n", cost);

        assertThat(exception, is(nullValue()));
        assertNotEquals(cost, 0L);
        assertTrue(cost > 1);
    }

    @Test
    public void testOpenTwiceThenException() {
        Exception exception1 = null;
        Exception exception2 = null;
        boolean flag1 = false;
        boolean flag2 = false;

        try (RocksDB rocksDB1 = RocksDB.open(options, dbPath)) {
            // Do something
            flag1 = true;
            try (RocksDB rocksDB2 = RocksDB.open(options, dbPath)) {
                // Can't reach here
                flag2 = true;
            } catch (RocksDBException e) {
                e.printStackTrace();
                exception2 = e;
            }
        } catch (RocksDBException e) {
            e.printStackTrace();
            exception1 = e;
        }

        assertThat(exception1, is(nullValue()));
        assertThat(exception2, is(notNullValue()));
        assertThat(flag1, is(true));
        assertThat(flag2, is(false));
    }

    @Test
    public void testOpenOnceAndReadOnly() {
        Exception exception1 = null;
        Exception exception2 = null;
        boolean flag1 = false;
        boolean flag2 = false;

        try (RocksDB rocksDB1 = RocksDB.open(options, dbPath)) {
            // Do something
            flag1 = true;
            try (RocksDB rocksDB2 = RocksDB.openReadOnly(options, dbPath)) {
                // Reach here since ReadOnly
                flag2 = true;
            } catch (RocksDBException e) {
                e.printStackTrace();
                exception2 = e;
            }
        } catch (RocksDBException e) {
            e.printStackTrace();
            exception1 = e;
        }

        assertThat(exception1, is(nullValue()));
        assertThat(exception2, is(nullValue()));
        assertThat(flag1, is(true));
        assertThat(flag2, is(true));
    }

    @Test
    public void testOpenOnceAndSecondary() {
        Exception exception1 = null;
        Exception exception2 = null;
        boolean flag1 = false;
        boolean flag2 = false;

        try (RocksDB rocksDB1 = RocksDB.open(options, dbPath)) {
            // Do something
            flag1 = true;
            try (RocksDB rocksDB2 = RocksDB.openAsSecondary(options, dbPath, dbPath+"_secondary")) {
                // Reach here since ReadOnly
                flag2 = true;
            } catch (RocksDBException e) {
                e.printStackTrace();
                exception2 = e;
            }
        } catch (RocksDBException e) {
            e.printStackTrace();
            exception1 = e;
        }

        try {
            RocksDB.destroyDB(dbPath+"_secondary", new Options());
        } catch (RocksDBException e) {
            e.printStackTrace();
        }

        assertThat(exception1, is(nullValue()));
        assertThat(exception2, is(nullValue()));
        assertThat(flag1, is(true));
        assertThat(flag2, is(true));
    }
}
